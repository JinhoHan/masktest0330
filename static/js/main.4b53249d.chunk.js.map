{"version":3,"sources":["components/js/SelectPage.js","components/js/Item.js","components/js/ItemList.js","components/js/ItemMapList.js","components/js/Header.js","components/js/SelectedItem.js","components/js/SelectedBox.js","App.js","serviceWorker.js","index.js"],"names":["SelectPage","acceptLocationCheck","getAcceptLocationInformation","props","window","confirm","console","log","className","id","onClick","this","to","React","Component","Item","geo","item","getDistanceFromLatLonInKm","handleClick","name","addr","remain_stat","stock_at","lat","lng","Card","CardTitle","ItemList","items","itemList","map","key","code","ItemMapList","getKaKaoMapMarker","selectedMarker","createdOverlay","mapContainer","document","getElementById","mapOption","center","kakao","maps","LatLng","level","Map","centerImageSize","Size","centerImageOption","offset","Point","centerMarkerImage","MarkerImage","centerLatLng","Marker","position","image","positions","storesImageSize","storesMarkerImage","makeMarkerAndCustomOverlay","storesLatLng","storesMarker","overlay","CustomOverlay","yAnchor","zIndex","kakaoMapCallAddr","content","event","addListener","setMap","setContent","onclick","nIdx","length","Header","getGeolocation","getAddressToGeolocation","address","distance","getDistanceToUser","useState","modal","setModal","modalToggle","userDistance","setUserDistance","Navbar","daum","Postcode","oncomplete","data","roadAddress","innerHTML","services","Geocoder","addressSearch","result","status","Status","OK","coords","latitude","y","longitude","x","open","src","alt","Button","width","height","viewBox","fill","xmlns","fillRule","d","clipRule","Modal","returnFocusAfterClose","isOpen","fade","ModalHeader","ModalBody","value","onChange","selectedValue","target","ModalFooter","color","SelectedItem","markerPosition","marker","createElement","html","overlayPosition","getPosition","SelectedBox","selectedItem","handleRemove","App","bool","setState","acceptLocationInformation","state","addressObject","handleSuccess","distanceObject","navigator","geolocation","getCurrentPosition","handleError","alert","error","url","fetch","then","res","ok","Error","json","mask","stores","catch","err","lat1","lng1","lat2","lng2","dLat","getDegreesToRadians","dLon","a","Math","sin","cos","atan2","sqrt","toFixed","deg","PI","selectStoreType","selectedItemMap","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4b53249d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport '../css/SelectPage.css';\r\n\r\n\r\nclass SelectPage extends React.Component {\r\n\r\n    acceptLocationCheck = () => {\r\n\r\n        const { getAcceptLocationInformation } = this.props;\r\n\r\n        if(!window.confirm(\"위치정보확인에 동의하십니까?\")) {\r\n            console.log(111);\r\n            // document.getElementById(\"select-button\").setAttribute( 'href', '' );\r\n            getAcceptLocationInformation(false);\r\n            return;\r\n        }\r\n        // document.getElementById(\"select-button\").setAttribute( 'href', '/list' );\r\n        getAcceptLocationInformation(true);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className={`select-condition-box`}>\r\n                <div className=\"select-codition-content\">\r\n                    <div className=\"select-codition-text\">\r\n                        내 주변 마스크는 어디에?\r\n                    </div>\r\n                    <div className=\"select-condition-button\">\r\n                        <Link id=\"select-button\" className=\"select-button\" onClick={this.acceptLocationCheck} to=\"/list\" >위치정보동의</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectPage;","import React from 'react';\r\nimport '../css/Item.css';\r\n\r\nimport { Card, CardTitle } from 'reactstrap';\r\n\r\nclass Item extends React.Component {\r\n\r\n    render() {\r\n        // console.log(this.props);\r\n        // const { geo, id, name, addr, remain_stat, stock_at, lat, lng, getDistanceFromLatLonInKm, handleClick } = this.props;\r\n        const { geo, item, getDistanceFromLatLonInKm, handleClick } = this.props;\r\n\r\n        const { name, addr, remain_stat, stock_at, lat, lng } = item;\r\n\r\n\r\n        return (\r\n            <div className={`card-item ${remain_stat}`} >\r\n                <Card className={`innerbody ${remain_stat}`} onClick={() => handleClick(item)}>\r\n                    <div className=\"mask_name_distance\">\r\n                        <CardTitle className={`mask_name ${remain_stat}`}>{name}</CardTitle>\r\n\r\n                        <CardTitle className=\"distance\">{getDistanceFromLatLonInKm(geo[0], geo[1], lat, lng)} km</CardTitle>\r\n                    </div>\r\n\r\n                    <CardTitle className={`mask_addr ${remain_stat}`}>{addr}</CardTitle>\r\n                    {/* <CardText>{addr}</CardText> */}\r\n            \r\n                    <CardTitle className={`mask_remain ${remain_stat}`}>\r\n                        <div className={`mask_remain_color ${remain_stat}`}></div>\r\n                        <div className=\"mask_remain_text\">\r\n                            재고 :\r\n                                {remain_stat === 'plenty' ? ' 100개 이상' :\r\n                                (remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n                                    (remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n                                        (remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지')))}\r\n                        </div>\r\n                    </CardTitle>\r\n\r\n                    <CardTitle className={`mask_stock ${stock_at === null ? 'none_stock' : 'ok_stock'} ${remain_stat}`}>\r\n                        입고시간 : {stock_at === null ? '입고정보없음' : stock_at}\r\n                    </CardTitle>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","import React from 'react';\r\nimport Item from './Item';\r\n\r\nimport '../css/ItemList.css';\r\n\r\nclass ItemList extends React.Component {\r\n\r\n    render() {\r\n        // console.log(this.props);\r\n        const { geo, items, getDistanceFromLatLonInKm, handleClick } = this.props;\r\n        // console.log(items);\r\n\r\n        const itemList = items.map (\r\n            ( item ) => (\r\n                <Item\r\n                    geo={geo}\r\n                    item={item}\r\n                    key={item.code}\r\n                    getDistanceFromLatLonInKm={getDistanceFromLatLonInKm}\r\n                    handleClick={handleClick} />\r\n            )\r\n        )\r\n\r\n        return (\r\n            <div className=\"item-list\">\r\n                {itemList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemList;","/*global kakao*/\r\nimport React from 'react';\r\n\r\nimport '../css/ItemMapList.css';\r\nimport '../css/KakaoStyle.css';\r\nimport '../css/MapOverlay.css';\r\n\r\n\r\n\r\nclass ItemMapList extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.getKaKaoMapMarker();\r\n    }\r\n\r\n    getKaKaoMapMarker = () => {\r\n\r\n        // 클릭한 마커를 담을 변수\r\n        let selectedMarker = null;\r\n        // 생성된 overlay 를 담을 변수\r\n        let createdOverlay = null;\r\n\r\n        const { geo, items, getDistanceFromLatLonInKm } = this.props;\r\n        // console.log(items);\r\n\r\n        // 지도 생성\r\n        // ===================================================================================================\r\n        const lat = geo[0];\r\n        const lng = geo[1];\r\n        const mapContainer = document.getElementById('mapList');\r\n\r\n        const mapOption = {\r\n            center: new kakao.maps.LatLng(lat, lng),    // 지도의 중심좌표\r\n            level: 4    // 지도의 확대 레벨\r\n        }\r\n        const map = new kakao.maps.Map(mapContainer, mapOption);    // 지도 생성\r\n        // ===================================================================================================\r\n        \r\n\r\n        // 중심좌표(나의 위치) 커스텀 마커 이미지 생성 및 마커 출력\r\n        // ===================================================================================================\r\n        const centerImageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png'; // 마커이미지의 주소입니다    \r\n        const centerImageSize = new kakao.maps.Size(32, 34); // 마커이미지의 크기입니다\r\n        const centerImageOption = {\r\n            offset: new kakao.maps.Point(27, 69)\r\n        }; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\r\n            \r\n        // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다\r\n        const centerMarkerImage = new kakao.maps.MarkerImage(centerImageSrc, centerImageSize, centerImageOption);\r\n\r\n        // 중심좌표 위도, 경도를 설정합니다\r\n        const centerLatLng = new kakao.maps.LatLng(lat, lng);\r\n\r\n        // 중심좌표에 마커 넣기\r\n        // const centerMarker = new kakao.maps.Marker({\r\n        //     map: map,   // 마커를 표시할 지도\r\n        //     position: centerLatLng,   // 마커의 위치\r\n        //     image: centerMarkerImage\r\n        // });\r\n        new kakao.maps.Marker({\r\n            map: map,   // 마커를 표시할 지도\r\n            position: centerLatLng,   // 마커의 위치\r\n            image: centerMarkerImage\r\n        });\r\n        // ===================================================================================================\r\n\r\n\r\n\r\n        // 약국 리스트 입니다.\r\n        // ===================================================================================================\r\n        let positions = items;\r\n        // ===================================================================================================\r\n\r\n\r\n        // 마커 이미지 주소 모음\r\n        // ===================================================================================================\r\n        // http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\r\n        // http://t1.daumcdn.net/mapjsapi/images/2x/marker.png\r\n        // https://k.kakaocdn.net/dn/1aitv/btqC3NxkUjj/kZKQNSCjnxYS0lorLaiiM0/img.png\r\n        // http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\r\n        // https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markers_sprites2.png\r\n        // https://i1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\r\n        // ===================================================================================================\r\n\r\n        \r\n        // 내 주변 약국 리스트 마커 이미지 생성\r\n        // ===================================================================================================\r\n        const storesImageSrc = 'http://t1.daumcdn.net/mapjsapi/images/2x/marker.png'; // 마커이미지의 주소입니다    \r\n        const storesImageSize = new kakao.maps.Size(32, 34); // 마커이미지의 크기입니다\r\n            // const imageOption = {offset: new kakao.maps.Point(27, 69)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\r\n        const storesImageOption = null;\r\n\r\n        // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다\r\n        const storesMarkerImage = new kakao.maps.MarkerImage(storesImageSrc, storesImageSize, storesImageOption);\r\n        // ===================================================================================================\r\n\r\n\r\n        // 마커와 커스텀오버레이 생성\r\n        // ===================================================================================================\r\n        const makeMarkerAndCustomOverlay = (item) => {\r\n\r\n            // 마커의 위도 경도를 설정합니다\r\n            const storesLatLng = new kakao.maps.LatLng(item.lat, item.lng);\r\n\r\n            // 마커를 생성합니다\r\n            const storesMarker = new kakao.maps.Marker({\r\n                map: map,\r\n                position: storesLatLng,\r\n                image: storesMarkerImage\r\n            });\r\n\r\n            // 마커 위에 커스텀오버레이를 표시합니다\r\n            // 마커를 중심으로 커스텀 오버레이를 표시하기위해 CSS를 이용해 위치를 설정했습니다\r\n            let overlay = new kakao.maps.CustomOverlay({\r\n                // clickable: true,\r\n                // xAnchor: 0.5,\r\n                yAnchor: 0.7,\r\n                zIndex: 3,\r\n                // content: content,\r\n                map: map,\r\n                position: storesLatLng\r\n            });\r\n            \r\n            // 카카오맵보기 주소\r\n            const kakaoMapCallAddr = item.name + \",\" + item.lat + \",\" + item.lng;\r\n\r\n            let content = '';\r\n            content +=  '<div class=\"customoverlay size300\">';\r\n            content +=      '<a class=\"kakao-map-open\" href=\"https://map.kakao.com/link/map/' + kakaoMapCallAddr + '\" target=\"_blank\">';\r\n            content +=          '';\r\n            content +=      '</a>';\r\n            content +=      '<div id=\"size85per\" class=\"card-item '+ item.remain_stat + ' size85per\">';\r\n            content +=          '<div class=\"overlay-innerbody ' + item.remain_stat + ' card left-only-round\">';\r\n            content +=              '<div class=\"overlay-mask-name-distance\">';\r\n            content +=                  '<div class=\"overlay-mask-name ' + item.remain_stat + ' card-title\">';\r\n            content +=                      item.name;\r\n            content +=                  '</div>';\r\n            content +=                  '<div class=\"overlay-distance card-title\">';\r\n            content +=                      getDistanceFromLatLonInKm(geo[0], geo[1], item.lat, item.lng) + ' km';\r\n            content +=                  '</div>';\r\n            content +=              '</div>';\r\n            content +=              '<div class=\"overlay-mask-addr ' + item.remain_stat + ' card-title\">';\r\n            content +=                  item.addr;\r\n            content +=              '</div>';\r\n            content +=              '<div class=\"overlay-mask-remain ' + item.remain_stat + ' card-title\">';\r\n            content +=                  '<div class=\"overlay-mask-remain-color ' + item.remain_stat + '\"></div>';\r\n            content +=                  '<div class=\"overlay-mask-remain-text\">';\r\n            content +=                      '재고 : ' + (item.remain_stat === 'plenty' ? ' 100개 이상' :\r\n                                                            (item.remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n                                                                (item.remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n                                                                    (item.remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지'))))\r\n            content +=                  '</div>';\r\n            content +=              '</div>';\r\n            content +=              '<div class=\"overlay-mask-stock ' + item.remain_stat + ' card-title ' + (item.stock_at === null ? 'none_stock' : 'ok_stock') + '\">';\r\n            content +=                  '입고시간 : ' + (item.stock_at === null ? '입고정보없음' : item.stock_at);\r\n            content +=              '</div>';\r\n            content +=          '</div>';\r\n            content +=      '</div>';\r\n            content +=  '</div>';\r\n\r\n            // let content = '';\r\n            // content +=  '<div class=\"customoverlay size300\">';\r\n            // content +=      '<a href=\"https://map.kakao.com/link/map/' + kakaoMapCallAddr + '\" target=\"_blank\">';\r\n            // content +=          '<div class=\"card-item '+ item.remain_stat + ' size90per\">';\r\n            // content +=              '<div class=\"overlay-innerbody ' + item.remain_stat + ' card\">';\r\n            // content +=                  '<div class=\"overlay-mask-name-distance\">';\r\n            // content +=                      '<div class=\"overlay-mask-name ' + item.remain_stat + ' card-title\">';\r\n            // content +=                          item.name;\r\n            // content +=                      '</div>';\r\n            // content +=                      '<div class=\"overlay-distance card-title\">';\r\n            // content +=                          getDistanceFromLatLonInKm(geo[0], geo[1], item.lat, item.lng) + ' km';\r\n            // content +=                      '</div>';\r\n            // content +=                  '</div>';\r\n            // content +=                  '<div class=\"overlay-mask-addr ' + item.remain_stat + ' card-title\">';\r\n            // content +=                      item.addr;\r\n            // content +=                  '</div>';\r\n            // content +=                  '<div class=\"overlay-mask-remain ' + item.remain_stat + ' card-title\">';\r\n            // content +=                      '<div class=\"overlay-mask-remain-color ' + item.remain_stat + '\"></div>';\r\n            // content +=                      '<div class=\"overlay-mask-remain-text\">';\r\n            // content +=                          '재고 : ' + (item.remain_stat === 'plenty' ? ' 100개 이상' :\r\n            //                                                         (item.remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n            //                                                             (item.remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n            //                                                                 (item.remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지'))))\r\n            // content +=                      '</div>';\r\n            // content +=                  '</div>';\r\n            // content +=                  '<div class=\"overlay-mask-stock ' + item.remain_stat + ' card-title ' + (item.stock_at === null ? 'none_stock' : 'ok_stock') + '\">';\r\n            // content +=                      '입고시간 : ' + (item.stock_at === null ? '입고정보없음' : item.stock_at);\r\n            // content +=                  '</div>';\r\n            // content +=              '</div>';\r\n            // content +=          '</div>';\r\n            // content +=      '</a>';\r\n            // content +=  '</div>';\r\n\r\n        \r\n            kakao.maps.event.addListener(storesMarker, 'click', function() {\r\n                // console.log(selectedMarker);\r\n                // console.log(selectedMarker !== storesMarker);\r\n\r\n                // 클릭된 마커가 없고, click 마커가 클릭된 마커가 아니면\r\n                if (!selectedMarker || selectedMarker !== storesMarker) {\r\n                    !!selectedMarker && createdOverlay.setMap(null);\r\n\r\n                    overlay.setContent(content);\r\n                    overlay.setMap(map);\r\n                }\r\n\r\n                // 클릭된 마커를 현재 클릭된 마커 객체로 설정합니다\r\n                createdOverlay = overlay;\r\n                selectedMarker = storesMarker;\r\n\r\n                // document.getElementById('size85per');\r\n                // console.log(document.getElementById('size85per'));\r\n                document.getElementById('size85per').onclick = function() {\r\n                    createdOverlay.setMap(null);\r\n                    createdOverlay = null;\r\n                    selectedMarker = null;\r\n                }\r\n            });\r\n        }\r\n        // ===================================================================================================\r\n\r\n\r\n\r\n        // 내 주변 약국 리스트 마커 출력\r\n        // ===================================================================================================\r\n        for(let nIdx = 0; nIdx < positions.length; nIdx++) {\r\n            // 마커와 커스텀오버레이를 생성합니다\r\n            makeMarkerAndCustomOverlay(positions[nIdx]);\r\n        }\r\n        // ===================================================================================================\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"item-map-list\">\r\n                <div id=\"mapList\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemMapList;","/*global kakao*/\r\nimport React, { useState } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport '../css/Header.css';\r\nimport '../css/HeaderModal.css';\r\n\r\nimport { Navbar, Button } from 'reactstrap';\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\n\r\n\r\nconst Header = ({ getGeolocation, getAddressToGeolocation, address, distance, getDistanceToUser }) => {\r\n\r\n    // 모달 창 오픈 클로즈 \r\n    const [modal, setModal] = useState(false);\r\n    const modalToggle = () => setModal(!modal);\r\n\r\n    // 거리\r\n    const [ userDistance, setUserDistance ] = useState(distance);\r\n    const handleDistanceChange = (event) => {\r\n        let selectedValue = event.target.value;\r\n        selectedValue = selectedValue *1;\r\n        // console.log(selectedValue);\r\n        setUserDistance(selectedValue);\r\n    }\r\n\r\n\r\n    const handleKaKaoPostService = () => {\r\n        // console.log(\"handleKaKaoPostService\");\r\n\r\n        new window.daum.Postcode({\r\n            oncomplete: function (data) {\r\n                const roadAddress = data.roadAddress; // 길 최종 주소 변수\r\n                // console.log(data);\r\n\r\n                document.getElementById('my-location').innerHTML = roadAddress;\r\n\r\n                // 주소-좌표 변환 객체를 생성합니다\r\n                let geocoder = new kakao.maps.services.Geocoder();\r\n\r\n                // 주소로 좌표를 검색한다\r\n                geocoder.addressSearch(data.roadAddress, function (result, status) {\r\n                    // console.log(result);\r\n                    // console.log(status);\r\n                    // 정상적으로 검색이 완료됐으면\r\n                    if (status === kakao.maps.services.Status.OK) {\r\n\r\n                        // let coords = new Object();\r\n                        // coords.latitude = result[0].y;\r\n                        // coords.longitude = result[0].x;\r\n\r\n                        // let position = new Object();\r\n                        // position.coords = coords;\r\n                        // position.roadAddress = roadAddress;\r\n                        // console.log(position);\r\n\r\n                        let position = {\r\n                            coords : {\r\n                                latitude : result[0].y,\r\n                                longitude : result[0].x\r\n                            },\r\n                            roadAddress : roadAddress\r\n                        }\r\n                        getAddressToGeolocation(position);\r\n                    }\r\n                });\r\n            }\r\n        }).open();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar className=\"navbar fixed-top navbar-light bg-light white\" >\r\n                <div className=\"header__title\">\r\n                    <div id=\"my-location\" className=\"header_text\" onClick={() => handleKaKaoPostService()}>\r\n                        {address !== null ? address : '내 위치'}\r\n                    </div>\r\n                    <div className=\"gps_button\" onClick={() => getGeolocation()}>\r\n                        <img className=\"gps_image\" src=\"https://k.kakaocdn.net/dn/bkl7up/btqC48UZVoy/iu1sMcCNmjuYAlZ4zW8qHK/img.png\" alt=\"\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"user-button-box\">\r\n                    <Link className=\"btn btn-sm btn-primary toggle-button\" to=\"/list\">목록보기</Link>\r\n                    <Link className=\"btn btn-sm btn-danger toggle-button\" to=\"/map\">지도보기</Link>\r\n                    <Button className=\"user-button btn-sm filter\" onClick={modalToggle}>\r\n                        필터&nbsp;\r\n                                <svg className=\"bi bi-filter\" width=\"1.5em\" height=\"1.5em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path fillRule=\"evenodd\" d=\"M2 10.5a.5.5 0 01.5-.5h3a.5.5 0 010 1h-3a.5.5 0 01-.5-.5zm0-3a.5.5 0 01.5-.5h7a.5.5 0 010 1h-7a.5.5 0 01-.5-.5zm0-3a.5.5 0 01.5-.5h11a.5.5 0 010 1h-11a.5.5 0 01-.5-.5z\" clipRule=\"evenodd\" />\r\n                        </svg>\r\n                    </Button>\r\n                </div>\r\n            </Navbar>\r\n            <Modal className=\"user-modal\" returnFocusAfterClose={false} isOpen={modal} fade={false}>\r\n                <ModalHeader>내 주변 마스크는 어디에?</ModalHeader>\r\n                <ModalBody>\r\n                    <div>\r\n                        <div className=\"user-distance\">\r\n                            검색 반경\r\n                        </div>\r\n                        <div className=\"user-distance-select-div\">\r\n                            <select id=\"user-distance-select\" className=\"btn btn-outline-secondary btn-lg user-distance-select\" value={userDistance} onChange={handleDistanceChange}>\r\n                                <option className=\"\" value=\"1000\">1km</option>\r\n                                <option className=\"\" value=\"2000\">2km</option>\r\n                                <option className=\"\" value=\"5000\">5km</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={() => {\r\n                        // console.log(document.getElementById('user-distance-select').value);\r\n                        modalToggle();\r\n                        getDistanceToUser(userDistance);\r\n                    }}>\r\n                        완료\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\n// const handleKaKaoPostService = () => {\r\n//     console.log(\"handleKaKaoPostService\");\r\n//     new daum.Postcode({\r\n//         oncomplete: function(data) {\r\n//             // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n//         }\r\n//     }).open();\r\n// }\r\n\r\nexport default Header;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// =========================================================================================================================\r\n// class Header extends React.Component {\r\n\r\n//     // componentDidMount() {\r\n//     //     const script = document.createElement(\"script\");\r\n//     //     script.src = \"//dapi.kakao.com/v2/maps/sdk.js?appkey=a2bf0955b2199f4251ff5881aa9e5d2c&libraries=services\";\r\n//     //     script.async = true;\r\n//     //     document.body.appendChild(script);\r\n//     // }\r\n// =========================================================================================================================","/*global kakao*/\r\nimport React from 'react';\r\n\r\nimport '../css/SelectedItem.css';\r\nimport { Card, CardTitle } from 'reactstrap';\r\n\r\nclass SelectedItem extends React.Component {\r\n\r\n    componentDidMount() {\r\n\r\n        const { lat, lng, name } = this.props;\r\n\r\n        const mapContainer = document.getElementById('map'); // 지도를 표시할 div \r\n        const mapOption = { \r\n            center: new kakao.maps.LatLng(lat, lng), // 지도의 중심좌표\r\n            level: 4 // 지도의 확대 레벨\r\n        };\r\n\r\n        // 지도를 표시할 div와  지도 옵션으로  지도를 생성합니다\r\n        const map = new kakao.maps.Map(mapContainer, mapOption);\r\n        \r\n\r\n        // 마커가 표시될 위치입니다.\r\n        const markerPosition  = new kakao.maps.LatLng(lat, lng);\r\n\r\n        // 중심좌표 커스텀 마커 이미지 생성\r\n        // ===================================================================================================\r\n        const centerImageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png'; // 마커이미지의 주소입니다    \r\n        const centerImageSize = new kakao.maps.Size(40, 44); // 마커이미지의 크기입니다\r\n        const centerImageOption = null; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\r\n            \r\n        // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다\r\n        const centerMarkerImage = new kakao.maps.MarkerImage(centerImageSrc, centerImageSize, centerImageOption);\r\n        // ===================================================================================================\r\n\r\n\r\n        // 마커를 생성합니다\r\n        let marker = new kakao.maps.Marker({\r\n            position: markerPosition,\r\n            image: centerMarkerImage\r\n        });\r\n\r\n        // 마커가 지도 위에 표시되도록 설정합니다\r\n        marker.setMap(map);\r\n\r\n\r\n        // 커스텀 오버레이에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n        // ===================================================================================================\r\n        let content = document.createElement(\"div\");\r\n        content.className = \"customoverlay\";\r\n\r\n\r\n        // https://map.kakao.com/link/map/우리회사,37.402056,127.108212\r\n\r\n        const kakaoMapCallAddr = name + \",\" + lat + \",\" + lng;\r\n        \r\n        let html = '';\r\n        html +=     '<a href=\"https://map.kakao.com/link/map/' + kakaoMapCallAddr + '\" target=\"_blank\">';\r\n        html +=         '<span class=\"title\">' + name + '</span>';\r\n        html +=     '</a>';\r\n\r\n        content.innerHTML = html;\r\n        // ===================================================================================================\r\n\r\n        // 커스텀 오버레이가 표시될 위치입니다\r\n        const overlayPosition = marker.getPosition();\r\n\r\n        // 커스텀 오버레이를 생성합니다.\r\n        // const customOverlay = new kakao.maps.CustomOverlay({\r\n        //     map: map,\r\n        //     position: overlayPosition,\r\n        //     content: content,\r\n        //     yAnchor: 0.3\r\n        // });\r\n        new kakao.maps.CustomOverlay({\r\n            map: map,\r\n            position: overlayPosition,\r\n            content: content,\r\n            yAnchor: 0.3\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { geo, name, addr, remain_stat, stock_at, lat, lng, getDistanceFromLatLonInKm } = this.props;\r\n\r\n        return (\r\n            <div className={`card-item`} >\r\n                <Card className={`innerbody selected-item`}>\r\n                    <CardTitle className={`mask_name`}>{name}</CardTitle>\r\n\r\n                    <CardTitle className=\"distance selected-item\">{getDistanceFromLatLonInKm(geo[0], geo[1], lat, lng)} km</CardTitle>\r\n\r\n                    <CardTitle className={`mask_addr `}>{addr}</CardTitle>\r\n\r\n                    <CardTitle className={`mask_remain`}>\r\n                        <div className={`mask_remain_color`}></div>\r\n                        <div className=\"mask_remain_text\">\r\n                            재고 :\r\n                                {remain_stat === 'plenty' ? ' 100개 이상' :\r\n                                (remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n                                    (remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n                                        (remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지')))}\r\n                        </div>\r\n                    </CardTitle>\r\n\r\n                    <CardTitle className={`mask_stock`}>\r\n                        입고시간 : {stock_at === null ? '입고정보없음' : stock_at}\r\n                    </CardTitle>\r\n                </Card>\r\n                <Card id=\"map\" className=\"kakao_map\"></Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectedItem;","import React from 'react';\r\nimport '../css/SelectedBox.css';\r\nimport SelectedItem from './SelectedItem';\r\n\r\n\r\nclass SelectedBox extends React.Component {\r\n\r\n    render() {\r\n        const { geo, selectedItem, getDistanceFromLatLonInKm, handleRemove } = this.props;\r\n        // console.log(selectedItem);\r\n\r\n        return (\r\n            <div>\r\n                <div className={`item-detail-overlay show`} onClick={handleRemove}>\r\n                </div>\r\n                <div className={`item-detail show`}>\r\n                    <SelectedItem\r\n                        geo={geo}\r\n                        name={selectedItem.name}\r\n                        addr={selectedItem.addr}\r\n                        remain_stat={selectedItem.remain_stat}\r\n                        stock_at={selectedItem.stock_at}\r\n                        lat={selectedItem.lat}\r\n                        lng={selectedItem.lng}\r\n                        id={selectedItem.code}\r\n                        key={selectedItem.code}\r\n                        getDistanceFromLatLonInKm={getDistanceFromLatLonInKm} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectedBox;","import React from 'react';\n\nimport SelectPage from './components/js/SelectPage';\nimport ItemList from './components/js/ItemList';\nimport ItemMapList from './components/js/ItemMapList';\nimport Header from './components/js/Header';\nimport SelectedBox from './components/js/SelectedBox';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tgeo: [],\n\t\t\taddress: [],\n\t\t\titems: [],\n\t\t\tdistance: 1000,\n\t\t\tselectStoreType: null,\n\t\t\tselectedItem: null,\n\t\t\tselectedItemMap: null,\n\t\t\tacceptLocationInformation: false\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\t// const acceptCheck = this.getAcceptLocationInformation();\n\t\tif(this.state.acceptLocationInformation) {\n\t\t\tthis.getGeolocation();\n\t\t}\n\t}\n\n\tgetAcceptLocationInformation = (bool) => {\n\t\tconsole.log(bool);\n\t\tif(bool === true) {\n\t\t\tthis.setState({ acceptLocationInformation: bool }, (state) => {\n\t\t\t\tthis.getGeolocation();\n\t\t\t});\n\t\t}\n\t}\n\n\tgetAddressToGeolocation = (addressObject) => {\n\t\tif(addressObject !== null) {\n\t\t\t// console.log(addressObject);\n\t\t\tthis.setState({ address: addressObject.roadAddress });\n\t\t\tthis.handleSuccess(addressObject);\n\t\t}\n\t}\n\n\tgetDistanceToUser = (distanceObject) => {\n\t\tif(this.state.distance !== distanceObject) {\n\t\t\t// console.log(distanceObject);\n\t\t\tlet distance = distanceObject *1;\n\t\t\tthis.setState({ distance: distance }, (state) => {\n\t\t\t\tconsole.log(this.state.distance);\n\t\t\t\tthis.handleSuccess(null);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetGeolocation = () => {\n\t\tconsole.log(\"getGeolocation 왔다!\");\n\t\tif(!navigator.geolocation) {\n\t\t\talert(\"현재위치찾기를 지원하지 않는 브라우저 입니다. 혹은 설정에서 위치정보 접근 권한을 허용해주세요\");\n\t\t} else {\n\t\t\tthis.setState({ address: null });\n\t\t\tnavigator.geolocation.getCurrentPosition(this.handleSuccess, this.handleError);\n\t\t}\n\t}\n\n\thandleError = (error) => {\n\t\t// console.log(error.code);\n\t\talert(\"현재위치를 받아오는데 실패했습니다\");\n\t}\n\n\thandleSuccess = (position) => {\n\t\tconsole.log(position);\n\t\tif(position !== null) {\n\t\t\tconst geo = [position.coords.latitude, position.coords.longitude];\n\t\t\t// const latitude = geo[0];\n\t\t\t// const longitude = geo[1];\n\t\t\t// console.log(latitude + \" ::: \" + longitude);\n\t\t\t// console.log(this.state.distance);\n\t\t\tthis.setState({geo: geo});\n\t\t}\n\t\t// console.log(this.state.geo[0]);\n\t\t// console.log(this.state.geo[1]);\n\t\t// console.log(this.state.distance);\n\n\t\tlet url = \"https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByGeo/json?lat=\" + this.state.geo[0] + \"&lng=\" + this.state.geo[1] + \"&m=\" + this.state.distance;\n\t\t// console.log(url);\n\n\t\tfetch(url)\n\t\t\t.then(res => {\n\t\t\t\tif(!res.ok) {\n\t\t\t\t\tthrow new Error(res.status);\n\t\t\t\t}\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then(mask => this.setState({items: mask.stores}))\n\t\t\t.catch(err => console.log(err))\n\t}\n\n\tgetDistanceFromLatLonInKm = (lat1, lng1, lat2, lng2) => {\n\t\tconst R = 6371; // Radius of the earth in km\n\t\tconst dLat = this.getDegreesToRadians(lat2 - lat1);  // degreesToRadians below\n\t\tconst dLon = this.getDegreesToRadians(lng2 - lng1);\n\t\tconst a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.getDegreesToRadians(lat1)) * Math.cos(this.getDegreesToRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n\t\tconst c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\t\tlet d = R * c; // Distance in km\n\t\td = d.toFixed(2);\n\t\treturn d;\n\t}\n\n\tgetDegreesToRadians = (deg) => {\n\t\treturn deg * (Math.PI / 180);\n\t}\n\n\thandleClick = (item) => {\n\t\tthis.setState({ selectedItem: item });\n\t}\n\n\thandleRemove = () => {\n\t\tthis.setState({ selectedItem: null });\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<Router>\n\t\t\t\t<Switch>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.acceptLocationInformation &&\n\t\t\t\t\t\t<Route path=\"/list\" component={() => \n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Header \n\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\tdistance={this.state.distance}\n\t\t\t\t\t\t\t\t\taddress={this.state.address}\n\t\t\t\t\t\t\t\t\tgetGeolocation={this.getGeolocation}\n\t\t\t\t\t\t\t\t\tgetAddressToGeolocation={this.getAddressToGeolocation}\n\t\t\t\t\t\t\t\t\tgetDistanceToUser={this.getDistanceToUser}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ItemList\n\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\titems={this.state.items}\n\t\t\t\t\t\t\t\t\tgetDistanceFromLatLonInKm={this.getDistanceFromLatLonInKm}\n\t\t\t\t\t\t\t\t\thandleClick={this.handleClick} />\n\t\t\t\t\t\t\t\t\t{this.state.selectedItem && <SelectedBox\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedItem={this.state.selectedItem}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetDistanceFromLatLonInKm={this.getDistanceFromLatLonInKm}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleRemove={this.handleRemove} />\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t} \n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.state.acceptLocationInformation &&\n\t\t\t\t\t\t<Route path=\"/map\" component={() => \n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<Header \n\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\tdistance={this.state.distance}\n\t\t\t\t\t\t\t\t\taddress={this.state.address}\n\t\t\t\t\t\t\t\t\tgetGeolocation={this.getGeolocation}\n\t\t\t\t\t\t\t\t\tgetAddressToGeolocation={this.getAddressToGeolocation}\n\t\t\t\t\t\t\t\t\tgetDistanceToUser={this.getDistanceToUser}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ItemMapList\n\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\titems={this.state.items}\n\t\t\t\t\t\t\t\t\tgetDistanceFromLatLonInKm={this.getDistanceFromLatLonInKm}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t} \n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\n\t\t\t\t\t<Route path=\"/\" component={() => \n\t\t\t\t\t\t<SelectPage \n\t\t\t\t\t\t\tgetAcceptLocationInformation={this.getAcceptLocationInformation}\n\t\t\t\t\t\t/>\n\t\t\t\t\t} \n\t\t\t\t\t/>\n\t\t\t\t</Switch>\n\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}