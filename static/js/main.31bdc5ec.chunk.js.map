{"version":3,"sources":["components/js/SelectPage.js","components/js/Item.js","components/js/SelectedItem.js","components/js/ItemList.js","components/js/ItemMapList.js","App.js","components/js/SelectedBox.js","serviceWorker.js","index.js"],"names":["React","Component","Item","this","props","geo","item","getDistanceFromLatLonInKm","handleClick","name","addr","remain_stat","stock_at","lat","lng","className","Card","onClick","CardTitle","SelectedItem","mapContainer","document","getElementById","mapOption","center","kakao","maps","LatLng","level","map","Map","markerPosition","centerImageSize","Size","centerMarkerImage","MarkerImage","marker","Marker","position","image","setMap","content","createElement","html","innerHTML","overlayPosition","getPosition","CustomOverlay","yAnchor","id","App","getAcceptLocationInformation","bool","setState","acceptLocationInformation","state","getGeolocation","getAddressToGeolocation","addressObject","address","roadAddress","handleSuccess","getDistanceToUser","distanceObject","distance","console","log","navigator","geolocation","getCurrentPosition","handleError","alert","error","coords","latitude","longitude","url","fetch","then","res","ok","Error","status","json","mask","items","stores","catch","err","lat1","lng1","lat2","lng2","dLat","getDegreesToRadians","dLon","a","Math","sin","cos","d","atan2","sqrt","toFixed","deg","PI","selectedItem","handleRemove","selectStoreType","selectedItemMap","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","message"],"mappings":"ydAMyBA,IAAMC,U,qBCyChBC,E,uKAxCF,MAGyDC,KAAKC,MAA3DC,EAHH,EAGGA,IAAKC,EAHR,EAGQA,KAAMC,EAHd,EAGcA,0BAA2BC,EAHzC,EAGyCA,YAEtCC,EAAgDH,EAAhDG,KAAMC,EAA0CJ,EAA1CI,KAAMC,EAAoCL,EAApCK,YAAaC,EAAuBN,EAAvBM,SAAUC,EAAaP,EAAbO,IAAKC,EAAQR,EAARQ,IAGhD,OACI,yBAAKC,UAAS,oBAAeJ,IACzB,kBAACK,EAAA,EAAD,CAAMD,UAAS,oBAAeJ,GAAeM,QAAS,kBAAMT,EAAYF,KACpE,yBAAKS,UAAU,sBACX,kBAACG,EAAA,EAAD,CAAWH,UAAS,oBAAeJ,IAAgBF,GAEnD,kBAACS,EAAA,EAAD,CAAWH,UAAU,YAAYR,EAA0BF,EAAI,GAAIA,EAAI,GAAIQ,EAAKC,GAAhF,QAGJ,kBAACI,EAAA,EAAD,CAAWH,UAAS,oBAAeJ,IAAgBD,GAGnD,kBAACQ,EAAA,EAAD,CAAWH,UAAS,sBAAiBJ,IACjC,yBAAKI,UAAS,4BAAuBJ,KACrC,yBAAKI,UAAU,oBAAf,iBAEyB,WAAhBJ,EAA2B,0BACX,SAAhBA,EAAyB,+CACL,QAAhBA,EAAwB,8CACJ,UAAhBA,EAA0B,wBAAW,8BAI1D,kBAACO,EAAA,EAAD,CAAWH,UAAS,qBAA6B,OAAbH,EAAoB,aAAe,WAAnD,YAAiED,IAArF,8BACyB,OAAbC,EAAoB,uCAAWA,S,GAlC5CZ,IAAMC,WC8GVkB,G,MC9GQnB,IAAMC,U,kBCIHD,IAAMC,U,oPFDP,IAAD,EAEWE,KAAKC,MAAxBS,EAFQ,EAERA,IAAKC,EAFG,EAEHA,IAAKL,EAFF,EAEEA,KAEZW,EAAeC,SAASC,eAAe,OACvCC,EAAY,CACdC,OAAQ,IAAIC,MAAMC,KAAKC,OAAOd,EAAKC,GACnCc,MAAO,GAILC,EAAM,IAAIJ,MAAMC,KAAKI,IAAIV,EAAcG,GAIvCQ,EAAkB,IAAIN,MAAMC,KAAKC,OAAOd,EAAKC,GAK7CkB,EAAkB,IAAIP,MAAMC,KAAKO,KAAK,GAAI,IAI1CC,EAAoB,IAAIT,MAAMC,KAAKS,YALlB,0EAK8CH,EAH3C,MAQtBI,EAAS,IAAIX,MAAMC,KAAKW,OAAO,CAC/BC,SAAUP,EACVQ,MAAOL,IAIXE,EAAOI,OAAOX,GAKd,IAAIY,EAAUpB,SAASqB,cAAc,OACrCD,EAAQ1B,UAAY,gBAKpB,IAEI4B,EAAO,GACXA,GAAY,4CAHalC,EAAO,IAAMI,EAAM,IAAMC,GAG0B,qBAC5E6B,GAAgB,uBAAyBlC,EAAO,UAChDkC,GAAY,OAEZF,EAAQG,UAAYD,EAIpB,IAAME,EAAkBT,EAAOU,cAS/B,IAAIrB,MAAMC,KAAKqB,cAAc,CACzBlB,IAAKA,EACLS,SAAUO,EACVJ,QAASA,EACTO,QAAS,O,+BAIP,IAAD,EACmF7C,KAAKC,MAArFC,EADH,EACGA,IAAKI,EADR,EACQA,KAAMC,EADd,EACcA,KAAMC,EADpB,EACoBA,YAAaC,EADjC,EACiCA,SAAUC,EAD3C,EAC2CA,IAAKC,EADhD,EACgDA,IAAKP,EADrD,EACqDA,0BAE1D,OACI,yBAAKQ,UAAS,aACV,kBAACC,EAAA,EAAD,CAAMD,UAAS,2BACX,kBAACG,EAAA,EAAD,CAAWH,UAAS,aAAgBN,GAEpC,kBAACS,EAAA,EAAD,CAAWH,UAAU,0BAA0BR,EAA0BF,EAAI,GAAIA,EAAI,GAAIQ,EAAKC,GAA9F,OAEA,kBAACI,EAAA,EAAD,CAAWH,UAAS,cAAiBL,GAErC,kBAACQ,EAAA,EAAD,CAAWH,UAAS,eAChB,yBAAKA,UAAS,sBACd,yBAAKA,UAAU,oBAAf,iBAEyB,WAAhBJ,EAA2B,0BACX,SAAhBA,EAAyB,+CACL,QAAhBA,EAAwB,8CACJ,UAAhBA,EAA0B,wBAAW,8BAI1D,kBAACO,EAAA,EAAD,CAAWH,UAAS,cAApB,8BACyB,OAAbH,EAAoB,uCAAWA,IAG/C,kBAACI,EAAA,EAAD,CAAMiC,GAAG,MAAMlC,UAAU,mB,GAvGdf,IAAMC,YGgMlBiD,GCjMWlD,IAAMC,U,wDDQ/B,WAAYG,GAAQ,IAAD,8BAClB,cAAMA,IAwBP+C,6BAA+B,SAACC,IACnB,IAATA,GACF,EAAKC,SAAS,CAAEC,0BAA2BF,IAAQ,SAACG,GACnD,EAAKC,qBA5BW,EAiCnBC,wBAA0B,SAACC,GACL,OAAlBA,IACF,EAAKL,SAAS,CAAEM,QAASD,EAAcE,cACvC,EAAKC,cAAcH,KApCF,EAwCnBI,kBAAoB,SAACC,GACpB,GAAG,EAAKR,MAAMS,WAAaD,EAAgB,CAC1C,IAAIC,EAA2B,EAAhBD,EACf,EAAKV,SAAS,CAAEW,SAAUA,IAAY,SAACT,GACtCU,QAAQC,IAAI,EAAKX,MAAMS,UACvB,EAAKH,cAAc,WA7CH,EAkDnBL,eAAiB,WACZW,UAAUC,aAGb,EAAKf,SAAS,CAAEM,QAAS,OACzBQ,UAAUC,YAAYC,mBAAmB,EAAKR,cAAe,EAAKS,cAHlEC,MAAM,sQApDW,EA2DnBD,YAAc,SAACE,GAEdD,MAAM,uGA7DY,EAgEnBV,cAAgB,SAACvB,GAEhB,GADA2B,QAAQC,IAAI5B,GACI,OAAbA,EAAmB,CACrB,IAAMjC,EAAM,CAACiC,EAASmC,OAAOC,SAAUpC,EAASmC,OAAOE,WAKvD,EAAKtB,SAAS,CAAChD,IAAKA,IAMrB,IAAIuE,EAAM,8EAAgF,EAAKrB,MAAMlD,IAAI,GAAK,QAAU,EAAKkD,MAAMlD,IAAI,GAAK,MAAQ,EAAKkD,MAAMS,SAG/Ja,MAAMD,GACJE,MAAK,SAAAC,GACL,IAAIA,EAAIC,GACP,MAAM,IAAIC,MAAMF,EAAIG,QAErB,OAAOH,EAAII,UAEXL,MAAK,SAAAM,GAAI,OAAI,EAAK/B,SAAS,CAACgC,MAAOD,EAAKE,YACxCC,OAAM,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,OAzFT,EA4FnBjF,0BAA4B,SAACkF,EAAMC,EAAMC,EAAMC,GAC9C,IACMC,EAAO,EAAKC,oBAAoBH,EAAOF,GACvCM,EAAO,EAAKD,oBAAoBF,EAAOF,GACvCM,EAAIC,KAAKC,IAAIL,EAAO,GAAKI,KAAKC,IAAIL,EAAO,GAAKI,KAAKE,IAAI,EAAKL,oBAAoBL,IAASQ,KAAKE,IAAI,EAAKL,oBAAoBH,IAASM,KAAKC,IAAIH,EAAO,GAAKE,KAAKC,IAAIH,EAAO,GAE3KK,EALM,MAIA,EAAIH,KAAKI,MAAMJ,KAAKK,KAAKN,GAAIC,KAAKK,KAAK,EAAIN,KAGrD,OADAI,EAAIA,EAAEG,QAAQ,IAnGI,EAuGnBT,oBAAsB,SAACU,GACtB,OAAOA,GAAOP,KAAKQ,GAAK,MAxGN,EA2GnBjG,YAAc,SAACF,GACd,EAAK+C,SAAS,CAAEqD,aAAcpG,KA5GZ,EA+GnBqG,aAAe,WACd,EAAKtD,SAAS,CAAEqD,aAAc,QA9G9B,EAAKnD,MAAQ,CACZlD,IAAK,GACLsD,QAAS,GACT0B,MAAO,GACPrB,SAAU,IACV4C,gBAAiB,KACjBF,aAAc,KACdG,gBAAiB,KAGjBvD,2BAA2B,GAZV,E,gEAoBfnD,KAAKoD,MAAMD,2BACbnD,KAAKqD,mB,uCAtBUxD,IAAMC,YEAJ6G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhG,SAASC,eAAe,SDwHpB,kBAAmB6C,WACrBA,UAAUmD,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdlC,OAAM,SAAAf,GACLP,QAAQO,MAAMA,EAAMkD,c","file":"static/js/main.31bdc5ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link, BrowserRouter } from \"react-router-dom\";\r\n\r\nimport '../css/SelectPage.css';\r\n\r\n\r\nclass SelectPage extends React.Component {\r\n\r\n    acceptLocationCheck = (e) => {\r\n        const { getAcceptLocationInformation } = this.props;\r\n\r\n        if(!window.confirm(\"위치정보확인에 동의하십니까?\")) {\r\n            e.preventDefault();\r\n            getAcceptLocationInformation(false);\r\n            return;\r\n        }\r\n        getAcceptLocationInformation(true);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className={`select-condition-box`}>\r\n                <div className=\"select-codition-content\">\r\n                    <div className=\"select-codition-text\">\r\n                        내 주변 마스크는 어디에?\r\n                    </div>\r\n                    <div className=\"select-condition-button\">\r\n                        <BrowserRouter basename={process.env.PUBLIC_URL} />\r\n                        <Link id=\"select-button\" className=\"select-button\" onClick={this.acceptLocationCheck} to=\"/list\" >위치정보동의</Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectPage;","import React from 'react';\r\nimport '../css/Item.css';\r\n\r\nimport { Card, CardTitle } from 'reactstrap';\r\n\r\nclass Item extends React.Component {\r\n\r\n    render() {\r\n        // console.log(this.props);\r\n        // const { geo, id, name, addr, remain_stat, stock_at, lat, lng, getDistanceFromLatLonInKm, handleClick } = this.props;\r\n        const { geo, item, getDistanceFromLatLonInKm, handleClick } = this.props;\r\n\r\n        const { name, addr, remain_stat, stock_at, lat, lng } = item;\r\n\r\n\r\n        return (\r\n            <div className={`card-item ${remain_stat}`} >\r\n                <Card className={`innerbody ${remain_stat}`} onClick={() => handleClick(item)}>\r\n                    <div className=\"mask_name_distance\">\r\n                        <CardTitle className={`mask_name ${remain_stat}`}>{name}</CardTitle>\r\n\r\n                        <CardTitle className=\"distance\">{getDistanceFromLatLonInKm(geo[0], geo[1], lat, lng)} km</CardTitle>\r\n                    </div>\r\n\r\n                    <CardTitle className={`mask_addr ${remain_stat}`}>{addr}</CardTitle>\r\n                    {/* <CardText>{addr}</CardText> */}\r\n            \r\n                    <CardTitle className={`mask_remain ${remain_stat}`}>\r\n                        <div className={`mask_remain_color ${remain_stat}`}></div>\r\n                        <div className=\"mask_remain_text\">\r\n                            재고 :\r\n                                {remain_stat === 'plenty' ? ' 100개 이상' :\r\n                                (remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n                                    (remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n                                        (remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지')))}\r\n                        </div>\r\n                    </CardTitle>\r\n\r\n                    <CardTitle className={`mask_stock ${stock_at === null ? 'none_stock' : 'ok_stock'} ${remain_stat}`}>\r\n                        입고시간 : {stock_at === null ? '입고정보없음' : stock_at}\r\n                    </CardTitle>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Item;","/*global kakao*/\r\nimport React from 'react';\r\n\r\nimport '../css/SelectedItem.css';\r\nimport { Card, CardTitle } from 'reactstrap';\r\n\r\nclass SelectedItem extends React.Component {\r\n\r\n    componentDidMount() {\r\n\r\n        const { lat, lng, name } = this.props;\r\n\r\n        const mapContainer = document.getElementById('map'); // 지도를 표시할 div \r\n        const mapOption = { \r\n            center: new kakao.maps.LatLng(lat, lng), // 지도의 중심좌표\r\n            level: 4 // 지도의 확대 레벨\r\n        };\r\n\r\n        // 지도를 표시할 div와  지도 옵션으로  지도를 생성합니다\r\n        const map = new kakao.maps.Map(mapContainer, mapOption);\r\n        \r\n\r\n        // 마커가 표시될 위치입니다.\r\n        const markerPosition  = new kakao.maps.LatLng(lat, lng);\r\n\r\n        // 중심좌표 커스텀 마커 이미지 생성\r\n        // ===================================================================================================\r\n        const centerImageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png'; // 마커이미지의 주소입니다    \r\n        const centerImageSize = new kakao.maps.Size(40, 44); // 마커이미지의 크기입니다\r\n        const centerImageOption = null; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\r\n            \r\n        // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다\r\n        const centerMarkerImage = new kakao.maps.MarkerImage(centerImageSrc, centerImageSize, centerImageOption);\r\n        // ===================================================================================================\r\n\r\n\r\n        // 마커를 생성합니다\r\n        let marker = new kakao.maps.Marker({\r\n            position: markerPosition,\r\n            image: centerMarkerImage\r\n        });\r\n\r\n        // 마커가 지도 위에 표시되도록 설정합니다\r\n        marker.setMap(map);\r\n\r\n\r\n        // 커스텀 오버레이에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n        // ===================================================================================================\r\n        let content = document.createElement(\"div\");\r\n        content.className = \"customoverlay\";\r\n\r\n\r\n        // https://map.kakao.com/link/map/우리회사,37.402056,127.108212\r\n\r\n        const kakaoMapCallAddr = name + \",\" + lat + \",\" + lng;\r\n        \r\n        let html = '';\r\n        html +=     '<a href=\"https://map.kakao.com/link/map/' + kakaoMapCallAddr + '\" target=\"_blank\">';\r\n        html +=         '<span class=\"title\">' + name + '</span>';\r\n        html +=     '</a>';\r\n\r\n        content.innerHTML = html;\r\n        // ===================================================================================================\r\n\r\n        // 커스텀 오버레이가 표시될 위치입니다\r\n        const overlayPosition = marker.getPosition();\r\n\r\n        // 커스텀 오버레이를 생성합니다.\r\n        // const customOverlay = new kakao.maps.CustomOverlay({\r\n        //     map: map,\r\n        //     position: overlayPosition,\r\n        //     content: content,\r\n        //     yAnchor: 0.3\r\n        // });\r\n        new kakao.maps.CustomOverlay({\r\n            map: map,\r\n            position: overlayPosition,\r\n            content: content,\r\n            yAnchor: 0.3\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { geo, name, addr, remain_stat, stock_at, lat, lng, getDistanceFromLatLonInKm } = this.props;\r\n\r\n        return (\r\n            <div className={`card-item`} >\r\n                <Card className={`innerbody selected-item`}>\r\n                    <CardTitle className={`mask_name`}>{name}</CardTitle>\r\n\r\n                    <CardTitle className=\"distance selected-item\">{getDistanceFromLatLonInKm(geo[0], geo[1], lat, lng)} km</CardTitle>\r\n\r\n                    <CardTitle className={`mask_addr `}>{addr}</CardTitle>\r\n\r\n                    <CardTitle className={`mask_remain`}>\r\n                        <div className={`mask_remain_color`}></div>\r\n                        <div className=\"mask_remain_text\">\r\n                            재고 :\r\n                                {remain_stat === 'plenty' ? ' 100개 이상' :\r\n                                (remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n                                    (remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n                                        (remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지')))}\r\n                        </div>\r\n                    </CardTitle>\r\n\r\n                    <CardTitle className={`mask_stock`}>\r\n                        입고시간 : {stock_at === null ? '입고정보없음' : stock_at}\r\n                    </CardTitle>\r\n                </Card>\r\n                <Card id=\"map\" className=\"kakao_map\"></Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectedItem;","import React from 'react';\r\nimport Item from './Item';\r\n\r\nimport '../css/ItemList.css';\r\n\r\nclass ItemList extends React.Component {\r\n\r\n    render() {\r\n        // console.log(this.props);\r\n        const { geo, items, getDistanceFromLatLonInKm, handleClick } = this.props;\r\n        // console.log(items);\r\n\r\n        const itemList = items.map (\r\n            ( item ) => (\r\n                <Item\r\n                    geo={geo}\r\n                    item={item}\r\n                    key={item.code}\r\n                    getDistanceFromLatLonInKm={getDistanceFromLatLonInKm}\r\n                    handleClick={handleClick} />\r\n            )\r\n        )\r\n\r\n        return (\r\n            <div className=\"item-list\">\r\n                {itemList}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemList;","/*global kakao*/\r\nimport React from 'react';\r\n\r\nimport '../css/ItemMapList.css';\r\nimport '../css/KakaoStyle.css';\r\nimport '../css/MapOverlay.css';\r\n\r\n\r\n\r\nclass ItemMapList extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.getKaKaoMapMarker();\r\n    }\r\n\r\n    getKaKaoMapMarker = () => {\r\n\r\n        // 클릭한 마커를 담을 변수\r\n        let selectedMarker = null;\r\n        // 생성된 overlay 를 담을 변수\r\n        let createdOverlay = null;\r\n\r\n        const { geo, items, getDistanceFromLatLonInKm } = this.props;\r\n        // console.log(items);\r\n\r\n        // 지도 생성\r\n        // ===================================================================================================\r\n        const lat = geo[0];\r\n        const lng = geo[1];\r\n        const mapContainer = document.getElementById('mapList');\r\n\r\n        const mapOption = {\r\n            center: new kakao.maps.LatLng(lat, lng),    // 지도의 중심좌표\r\n            level: 4    // 지도의 확대 레벨\r\n        }\r\n        const map = new kakao.maps.Map(mapContainer, mapOption);    // 지도 생성\r\n        // ===================================================================================================\r\n        \r\n\r\n        // 중심좌표(나의 위치) 커스텀 마커 이미지 생성 및 마커 출력\r\n        // ===================================================================================================\r\n        const centerImageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png'; // 마커이미지의 주소입니다    \r\n        const centerImageSize = new kakao.maps.Size(32, 34); // 마커이미지의 크기입니다\r\n        const centerImageOption = {\r\n            offset: new kakao.maps.Point(27, 69)\r\n        }; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\r\n            \r\n        // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다\r\n        const centerMarkerImage = new kakao.maps.MarkerImage(centerImageSrc, centerImageSize, centerImageOption);\r\n\r\n        // 중심좌표 위도, 경도를 설정합니다\r\n        const centerLatLng = new kakao.maps.LatLng(lat, lng);\r\n\r\n        // 중심좌표에 마커 넣기\r\n        // const centerMarker = new kakao.maps.Marker({\r\n        //     map: map,   // 마커를 표시할 지도\r\n        //     position: centerLatLng,   // 마커의 위치\r\n        //     image: centerMarkerImage\r\n        // });\r\n        new kakao.maps.Marker({\r\n            map: map,   // 마커를 표시할 지도\r\n            position: centerLatLng,   // 마커의 위치\r\n            image: centerMarkerImage\r\n        });\r\n        // ===================================================================================================\r\n\r\n\r\n\r\n        // 약국 리스트 입니다.\r\n        // ===================================================================================================\r\n        let positions = items;\r\n        // ===================================================================================================\r\n\r\n\r\n        // 마커 이미지 주소 모음\r\n        // ===================================================================================================\r\n        // http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\r\n        // http://t1.daumcdn.net/mapjsapi/images/2x/marker.png\r\n        // https://k.kakaocdn.net/dn/1aitv/btqC3NxkUjj/kZKQNSCjnxYS0lorLaiiM0/img.png\r\n        // http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png\r\n        // https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markers_sprites2.png\r\n        // https://i1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png\r\n        // ===================================================================================================\r\n\r\n        \r\n        // 내 주변 약국 리스트 마커 이미지 생성\r\n        // ===================================================================================================\r\n        const storesImageSrc = 'https://t1.daumcdn.net/mapjsapi/images/2x/marker.png'; // 마커이미지의 주소입니다    \r\n        const storesImageSize = new kakao.maps.Size(32, 34); // 마커이미지의 크기입니다\r\n            // const imageOption = {offset: new kakao.maps.Point(27, 69)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.\r\n        const storesImageOption = null;\r\n\r\n        // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다\r\n        const storesMarkerImage = new kakao.maps.MarkerImage(storesImageSrc, storesImageSize, storesImageOption);\r\n        // ===================================================================================================\r\n\r\n\r\n        // 마커와 커스텀오버레이 생성\r\n        // ===================================================================================================\r\n        const makeMarkerAndCustomOverlay = (item) => {\r\n\r\n            // 마커의 위도 경도를 설정합니다\r\n            const storesLatLng = new kakao.maps.LatLng(item.lat, item.lng);\r\n\r\n            // 마커를 생성합니다\r\n            const storesMarker = new kakao.maps.Marker({\r\n                map: map,\r\n                position: storesLatLng,\r\n                image: storesMarkerImage\r\n            });\r\n\r\n            // 마커 위에 커스텀오버레이를 표시합니다\r\n            // 마커를 중심으로 커스텀 오버레이를 표시하기위해 CSS를 이용해 위치를 설정했습니다\r\n            let overlay = new kakao.maps.CustomOverlay({\r\n                // clickable: true,\r\n                // xAnchor: 0.5,\r\n                yAnchor: 0.7,\r\n                zIndex: 3,\r\n                // content: content,\r\n                map: map,\r\n                position: storesLatLng\r\n            });\r\n            \r\n            // 카카오맵보기 주소\r\n            const kakaoMapCallAddr = item.name + \",\" + item.lat + \",\" + item.lng;\r\n\r\n            let content = '';\r\n            content +=  '<div class=\"customoverlay size300\">';\r\n            content +=      '<a class=\"kakao-map-open\" href=\"https://map.kakao.com/link/map/' + kakaoMapCallAddr + '\" target=\"_blank\">';\r\n            content +=          '';\r\n            content +=      '</a>';\r\n            content +=      '<div id=\"size85per\" class=\"card-item '+ item.remain_stat + ' size85per\">';\r\n            content +=          '<div class=\"overlay-innerbody ' + item.remain_stat + ' card left-only-round\">';\r\n            content +=              '<div class=\"overlay-mask-name-distance\">';\r\n            content +=                  '<div class=\"overlay-mask-name ' + item.remain_stat + ' card-title\">';\r\n            content +=                      item.name;\r\n            content +=                  '</div>';\r\n            content +=                  '<div class=\"overlay-distance card-title\">';\r\n            content +=                      getDistanceFromLatLonInKm(geo[0], geo[1], item.lat, item.lng) + ' km';\r\n            content +=                  '</div>';\r\n            content +=              '</div>';\r\n            content +=              '<div class=\"overlay-mask-addr ' + item.remain_stat + ' card-title\">';\r\n            content +=                  item.addr;\r\n            content +=              '</div>';\r\n            content +=              '<div class=\"overlay-mask-remain ' + item.remain_stat + ' card-title\">';\r\n            content +=                  '<div class=\"overlay-mask-remain-color ' + item.remain_stat + '\"></div>';\r\n            content +=                  '<div class=\"overlay-mask-remain-text\">';\r\n            content +=                      '재고 : ' + (item.remain_stat === 'plenty' ? ' 100개 이상' :\r\n                                                            (item.remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n                                                                (item.remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n                                                                    (item.remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지'))))\r\n            content +=                  '</div>';\r\n            content +=              '</div>';\r\n            content +=              '<div class=\"overlay-mask-stock ' + item.remain_stat + ' card-title ' + (item.stock_at === null ? 'none_stock' : 'ok_stock') + '\">';\r\n            content +=                  '입고시간 : ' + (item.stock_at === null ? '입고정보없음' : item.stock_at);\r\n            content +=              '</div>';\r\n            content +=          '</div>';\r\n            content +=      '</div>';\r\n            content +=  '</div>';\r\n\r\n            // let content = '';\r\n            // content +=  '<div class=\"customoverlay size300\">';\r\n            // content +=      '<a href=\"https://map.kakao.com/link/map/' + kakaoMapCallAddr + '\" target=\"_blank\">';\r\n            // content +=          '<div class=\"card-item '+ item.remain_stat + ' size90per\">';\r\n            // content +=              '<div class=\"overlay-innerbody ' + item.remain_stat + ' card\">';\r\n            // content +=                  '<div class=\"overlay-mask-name-distance\">';\r\n            // content +=                      '<div class=\"overlay-mask-name ' + item.remain_stat + ' card-title\">';\r\n            // content +=                          item.name;\r\n            // content +=                      '</div>';\r\n            // content +=                      '<div class=\"overlay-distance card-title\">';\r\n            // content +=                          getDistanceFromLatLonInKm(geo[0], geo[1], item.lat, item.lng) + ' km';\r\n            // content +=                      '</div>';\r\n            // content +=                  '</div>';\r\n            // content +=                  '<div class=\"overlay-mask-addr ' + item.remain_stat + ' card-title\">';\r\n            // content +=                      item.addr;\r\n            // content +=                  '</div>';\r\n            // content +=                  '<div class=\"overlay-mask-remain ' + item.remain_stat + ' card-title\">';\r\n            // content +=                      '<div class=\"overlay-mask-remain-color ' + item.remain_stat + '\"></div>';\r\n            // content +=                      '<div class=\"overlay-mask-remain-text\">';\r\n            // content +=                          '재고 : ' + (item.remain_stat === 'plenty' ? ' 100개 이상' :\r\n            //                                                         (item.remain_stat === 'some' ? ' 30개 이상 100개미만' :\r\n            //                                                             (item.remain_stat === 'few' ? ' 2개 이상 30개 미만' :\r\n            //                                                                 (item.remain_stat === 'empty' ? ' 1개 이하' : ' 판매중지'))))\r\n            // content +=                      '</div>';\r\n            // content +=                  '</div>';\r\n            // content +=                  '<div class=\"overlay-mask-stock ' + item.remain_stat + ' card-title ' + (item.stock_at === null ? 'none_stock' : 'ok_stock') + '\">';\r\n            // content +=                      '입고시간 : ' + (item.stock_at === null ? '입고정보없음' : item.stock_at);\r\n            // content +=                  '</div>';\r\n            // content +=              '</div>';\r\n            // content +=          '</div>';\r\n            // content +=      '</a>';\r\n            // content +=  '</div>';\r\n\r\n        \r\n            kakao.maps.event.addListener(storesMarker, 'click', function() {\r\n                // console.log(selectedMarker);\r\n                // console.log(selectedMarker !== storesMarker);\r\n\r\n                // 클릭된 마커가 없고, click 마커가 클릭된 마커가 아니면\r\n                if (!selectedMarker || selectedMarker !== storesMarker) {\r\n                    !!selectedMarker && createdOverlay.setMap(null);\r\n\r\n                    overlay.setContent(content);\r\n                    overlay.setMap(map);\r\n                }\r\n\r\n                // 클릭된 마커를 현재 클릭된 마커 객체로 설정합니다\r\n                createdOverlay = overlay;\r\n                selectedMarker = storesMarker;\r\n\r\n                // document.getElementById('size85per');\r\n                // console.log(document.getElementById('size85per'));\r\n                document.getElementById('size85per').onclick = function() {\r\n                    createdOverlay.setMap(null);\r\n                    createdOverlay = null;\r\n                    selectedMarker = null;\r\n                }\r\n            });\r\n        }\r\n        // ===================================================================================================\r\n\r\n\r\n\r\n        // 내 주변 약국 리스트 마커 출력\r\n        // ===================================================================================================\r\n        for(let nIdx = 0; nIdx < positions.length; nIdx++) {\r\n            // 마커와 커스텀오버레이를 생성합니다\r\n            makeMarkerAndCustomOverlay(positions[nIdx]);\r\n        }\r\n        // ===================================================================================================\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"item-map-list\">\r\n                <div id=\"mapList\"></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ItemMapList;","import React from 'react';\n\nimport SelectPage from './components/js/SelectPage';\nimport ItemList from './components/js/ItemList';\nimport ItemMapList from './components/js/ItemMapList';\nimport Header from './components/js/Header';\nimport SelectedBox from './components/js/SelectedBox';\n\n// import { BrowserRouter as Router, Route, Switch, BrowserRouter } from 'react-router-dom';\nimport { Router, Route, Switch, BrowserRouter } from 'react-router-dom';\n\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tgeo: [],\n\t\t\taddress: [],\n\t\t\titems: [],\n\t\t\tdistance: 1000,\n\t\t\tselectStoreType: null,\n\t\t\tselectedItem: null,\n\t\t\tselectedItemMap: null,\n\n\t\t\t// acceptLocationInformation: false\n\t\t\tacceptLocationInformation: true\n\t\t\t// map이나 list 에서 새로고침을 할 경우.. url은 그대로 /masktest0330/list(또는 map)을 유지하지만..\n\t\t\t// 해당 값이 false 여서 화면이 제대로 표시되지 않음. 그래서 true 로 변경하는 꼼수 사용.\n\t\t\t// 앞에서 위치확인 비동의를 할 경우에 경로 이동을 시켜주지 않기때문에..\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tif(this.state.acceptLocationInformation) {\n\t\t\tthis.getGeolocation();\n\t\t}\n\t}\n\n\tgetAcceptLocationInformation = (bool) => {\n\t\tif(bool === true) {\n\t\t\tthis.setState({ acceptLocationInformation: bool }, (state) => {\n\t\t\t\tthis.getGeolocation();\n\t\t\t});\n\t\t}\n\t}\n\n\tgetAddressToGeolocation = (addressObject) => {\n\t\tif(addressObject !== null) {\n\t\t\tthis.setState({ address: addressObject.roadAddress });\n\t\t\tthis.handleSuccess(addressObject);\n\t\t}\n\t}\n\n\tgetDistanceToUser = (distanceObject) => {\n\t\tif(this.state.distance !== distanceObject) {\n\t\t\tlet distance = distanceObject *1;\n\t\t\tthis.setState({ distance: distance }, (state) => {\n\t\t\t\tconsole.log(this.state.distance);\n\t\t\t\tthis.handleSuccess(null);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetGeolocation = () => {\n\t\tif(!navigator.geolocation) {\n\t\t\talert(\"현재위치찾기를 지원하지 않는 브라우저 입니다. 혹은 설정에서 위치정보 접근 권한을 허용해주세요\");\n\t\t} else {\n\t\t\tthis.setState({ address: null });\n\t\t\tnavigator.geolocation.getCurrentPosition(this.handleSuccess, this.handleError);\n\t\t}\n\t}\n\n\thandleError = (error) => {\n\t\t// console.log(error.code);\n\t\talert(\"현재위치를 받아오는데 실패했습니다\");\n\t}\n\n\thandleSuccess = (position) => {\n\t\tconsole.log(position);\n\t\tif(position !== null) {\n\t\t\tconst geo = [position.coords.latitude, position.coords.longitude];\n\t\t\t// const latitude = geo[0];\n\t\t\t// const longitude = geo[1];\n\t\t\t// console.log(latitude + \" ::: \" + longitude);\n\t\t\t// console.log(this.state.distance);\n\t\t\tthis.setState({geo: geo});\n\t\t}\n\t\t// console.log(this.state.geo[0]);\n\t\t// console.log(this.state.geo[1]);\n\t\t// console.log(this.state.distance);\n\n\t\tlet url = \"https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByGeo/json?lat=\" + this.state.geo[0] + \"&lng=\" + this.state.geo[1] + \"&m=\" + this.state.distance;\n\t\t// console.log(url);\n\n\t\tfetch(url)\n\t\t\t.then(res => {\n\t\t\t\tif(!res.ok) {\n\t\t\t\t\tthrow new Error(res.status);\n\t\t\t\t}\n\t\t\t\treturn res.json();\n\t\t\t})\n\t\t\t.then(mask => this.setState({items: mask.stores}))\n\t\t\t.catch(err => console.log(err))\n\t}\n\n\tgetDistanceFromLatLonInKm = (lat1, lng1, lat2, lng2) => {\n\t\tconst R = 6371; // Radius of the earth in km\n\t\tconst dLat = this.getDegreesToRadians(lat2 - lat1);  // degreesToRadians below\n\t\tconst dLon = this.getDegreesToRadians(lng2 - lng1);\n\t\tconst a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.getDegreesToRadians(lat1)) * Math.cos(this.getDegreesToRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n\t\tconst c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\t\tlet d = R * c; // Distance in km\n\t\td = d.toFixed(2);\n\t\treturn d;\n\t}\n\n\tgetDegreesToRadians = (deg) => {\n\t\treturn deg * (Math.PI / 180);\n\t}\n\n\thandleClick = (item) => {\n\t\tthis.setState({ selectedItem: item });\n\t}\n\n\thandleRemove = () => {\n\t\tthis.setState({ selectedItem: null });\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t// <Router>\n\t\t\t\t<BrowserRouter basename={process.env.PUBLIC_URL} >\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.acceptLocationInformation &&\n\t\t\t\t\t\t\t<Route path=\"/list\" component={() => \n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Header \n\t\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\t\tdistance={this.state.distance}\n\t\t\t\t\t\t\t\t\t\taddress={this.state.address}\n\t\t\t\t\t\t\t\t\t\tgetGeolocation={this.getGeolocation}\n\t\t\t\t\t\t\t\t\t\tgetAddressToGeolocation={this.getAddressToGeolocation}\n\t\t\t\t\t\t\t\t\t\tgetDistanceToUser={this.getDistanceToUser}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<ItemList\n\t\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\t\titems={this.state.items}\n\t\t\t\t\t\t\t\t\t\tgetDistanceFromLatLonInKm={this.getDistanceFromLatLonInKm}\n\t\t\t\t\t\t\t\t\t\thandleClick={this.handleClick} />\n\t\t\t\t\t\t\t\t\t\t{this.state.selectedItem && <SelectedBox\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselectedItem={this.state.selectedItem}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tgetDistanceFromLatLonInKm={this.getDistanceFromLatLonInKm}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thandleRemove={this.handleRemove} />\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.acceptLocationInformation &&\n\t\t\t\t\t\t\t<Route path=\"/map\" component={() => \n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Header \n\t\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\t\tdistance={this.state.distance}\n\t\t\t\t\t\t\t\t\t\taddress={this.state.address}\n\t\t\t\t\t\t\t\t\t\tgetGeolocation={this.getGeolocation}\n\t\t\t\t\t\t\t\t\t\tgetAddressToGeolocation={this.getAddressToGeolocation}\n\t\t\t\t\t\t\t\t\t\tgetDistanceToUser={this.getDistanceToUser}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<ItemMapList\n\t\t\t\t\t\t\t\t\t\tgeo={this.state.geo}\n\t\t\t\t\t\t\t\t\t\titems={this.state.items}\n\t\t\t\t\t\t\t\t\t\tgetDistanceFromLatLonInKm={this.getDistanceFromLatLonInKm}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t} \n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\n\t\t\t\t\t\t<Route path=\"/\" component={() => \n\t\t\t\t\t\t\t<SelectPage \n\t\t\t\t\t\t\t\tgetAcceptLocationInformation={this.getAcceptLocationInformation}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t} \n\t\t\t\t\t\t/>\n\t\t\t\t\t</Switch>\n\t\t\t\t</BrowserRouter>\n\t\t\t// </Router>\n\t\t);\n\t}\n}\n\nexport default App;","import React from 'react';\r\nimport '../css/SelectedBox.css';\r\nimport SelectedItem from './SelectedItem';\r\n\r\n\r\nclass SelectedBox extends React.Component {\r\n\r\n    render() {\r\n        const { geo, selectedItem, getDistanceFromLatLonInKm, handleRemove } = this.props;\r\n        // console.log(selectedItem);\r\n\r\n        return (\r\n            <div>\r\n                <div className={`item-detail-overlay show`} onClick={handleRemove}>\r\n                </div>\r\n                <div className={`item-detail show`}>\r\n                    <SelectedItem\r\n                        geo={geo}\r\n                        name={selectedItem.name}\r\n                        addr={selectedItem.addr}\r\n                        remain_stat={selectedItem.remain_stat}\r\n                        stock_at={selectedItem.stock_at}\r\n                        lat={selectedItem.lat}\r\n                        lng={selectedItem.lng}\r\n                        id={selectedItem.code}\r\n                        key={selectedItem.code}\r\n                        getDistanceFromLatLonInKm={getDistanceFromLatLonInKm} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SelectedBox;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}